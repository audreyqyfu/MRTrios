library(devtools)
document()
document()
library(MRTrios)
?meth
document()
?meth
document()
?meth
document()
?meth
dim(meth)
meth[1,1:5]
meth[1,1:10]
cna[1,1:5]
document()
library(MRTrios)
humanmeth[1,1:10]
library(devtools)
humanmeth[1,]
humanmeth[2,]
humanmeth[3,]
humanmeth[4,]
document()
?humanmeth
warnings()
document()
?humanmeth
?meth
library(MRTrios)
document()
?meth
document()
library(MRTrios)
document()
?meth
document()
?meth
document()
?meth
document()
?meth
?sig.pcs.gene
library(MRTrios)
?meth
?sig.pcs.gene
sig.pcs.gene[1:5]
dim(meth)
meth[1:5,1:5]
dim(gene)
dim(cna)
document()
library(devtools)
document()
library(MRTrios)
#import the data
df1 <- read.delim("/mnt/ceph/kark6289/PCandTrioAnalysis/output.10.14/model.trio.MRGN.all.posER.reclassify2.txt", header = TRUE)
df2 <- read.delim("/mnt/ceph/kark6289/PCandTrioAnalysis/output.10.14/model.trio.MRGN.all.negER.reclassify2.txt", header = TRUE)
library(MRTrios)
dim(pc.meth)
dim(pc.meth.pos)
dim(pc.gene.pos)
library(MRGN)
library(MRTrios)
?findPCs
library(MRTrios)
?findPCs
library(MRGN)
?get.conf.matrix
library(help = "MRGN")
library(MRTrios)
library(help = 'MRTrios')
library(devtools)
document()
library(MRTrios)
library(help = 'MRTrios')
getwd()
library(devtools)
document()
library(MRTrios)
document()
?postFilter
setwd("/Users/kark6289/OneDrive - University of Idaho/DOCUMENTS/AUDREY FU LAB/Downsampling")
model <- read.delim("model.summary.txt")
loc.M1.1 <- read.delim("loc.M1.1.summary.txt")
loc.M1.2 <- read.delim("loc.M1.2.summary.txt")
level_order <- c('Pos', 'Neg')
p1 <- ggplot(data=model, aes(x=Var1, y=Freq, fill = factor(type, level = level_order))) +
geom_bar(stat="identity", position=position_dodge())
p1 <- p1 + scale_fill_manual(values=c('#003366','#666666'))
library(dplyr)
library(ggplot2)
library(gridExtra)
library(grid)
p1 <- ggplot(data=model, aes(x=Var1, y=Freq, fill = factor(type, level = level_order))) +
geom_bar(stat="identity", position=position_dodge())
p1 <- p1 + scale_fill_manual(values=c('#003366','#666666'))
p1 <- p1 + ggtitle("Causal Inference Models") +
xlab("Models") + ylab("Count") +
theme(plot.title = element_text(hjust = 0.5))
p1 <- p1 + guides(fill=guide_legend(title="ER type"))
p1
level_order_loc <- c("TSS", "Body", "5'/3'UTR")
p2 <- ggplot(data=loc.M1.1, aes(x=factor(Var1, level = level_order_loc), y=Freq, fill = factor(type, level = level_order))) +
geom_bar(stat="identity", position=position_dodge()) #+
#ylim(0,16000)
p2 <- p2 + scale_fill_manual(values=c('#003366','#666666'))
p2 <- p2 + ggtitle("M1.1 model based on Location") +
xlab("Locations") + ylab("Count") +
theme(plot.title = element_text(hjust = 0.5))
p2 <- p2 + guides(fill=guide_legend(title="ER type"))
p2
p3 <- ggplot(data=loc.M1.2, aes(x=factor(Var1, level = level_order_loc), y=Freq, fill = factor(type, level = level_order))) +
geom_bar(stat="identity", position=position_dodge()) +
ylim(0,16000)
p3 <- p3 + scale_fill_manual(values=c('#003366','#666666'))
p3 <- p3 + ggtitle("M1.2 model based on Location") +
xlab("Locations") + ylab("Count") +
theme(plot.title = element_text(hjust = 0.5))
p3 <- p3 + guides(fill=guide_legend(title="ER type"))
p3
grid.arrange(p2, p3, ncol=2)
p3 <- ggplot(data=loc.M1.2, aes(x=factor(Var1, level = level_order_loc), y=Freq, fill = factor(type, level = level_order))) +
geom_bar(stat="identity", position=position_dodge()) +
ylim(0,50000)
p3 <- p3 + scale_fill_manual(values=c('#003366','#666666'))
p3 <- p3 + ggtitle("M1.2 model based on Location") +
xlab("Locations") + ylab("Count") +
theme(plot.title = element_text(hjust = 0.5))
p3 <- p3 + guides(fill=guide_legend(title="ER type"))
p3
grid.arrange(p2, p3, ncol=2)
p2 <- ggplot(data=loc.M1.1, aes(x=factor(Var1, level = level_order_loc), y=Freq, fill = factor(type, level = level_order))) +
geom_bar(stat="identity", position=position_dodge()) +
ylim(0,50000)
p2 <- p2 + scale_fill_manual(values=c('#003366','#666666'))
p2 <- p2 + ggtitle("M1.1 model based on Location") +
xlab("Locations") + ylab("Count") +
theme(plot.title = element_text(hjust = 0.5))
p2 <- p2 + guides(fill=guide_legend(title="ER type"))
p2
p3 <- ggplot(data=loc.M1.2, aes(x=factor(Var1, level = level_order_loc), y=Freq, fill = factor(type, level = level_order))) +
geom_bar(stat="identity", position=position_dodge()) +
ylim(0,50000)
p3 <- p3 + scale_fill_manual(values=c('#003366','#666666'))
p3 <- p3 + ggtitle("M1.2 model based on Location") +
xlab("Locations") + ylab("Count") +
theme(plot.title = element_text(hjust = 0.5))
p3 <- p3 + guides(fill=guide_legend(title="ER type"))
p3
grid.arrange(p2, p3, ncol=2)
setwd("/Users/kark6289/OneDrive - University of Idaho/DOCUMENTS/AUDREY FU LAB/Probe info")
M0.1.pos = read.csv("M0.1_pos.csv")
dim(M0.1.pos)
M1.2.pos = read.csv("M1.2_pos.csv")
dim(M1.2.pos)
M1.2.pos[1,]
M1.2.pos[1,]
M1.2.pos[3239,]
M1.2.pos[3239:3245,]
M1.2.pos[1,]
dim(M1.2.pos)
M1.1.pos = read.csv("M1.1_pos.csv")
dim(M1.1.pos)
M1.1.pos[1,]
M0.2.pos = read.csv("M0.2_pos.csv")
dim(M0.2.pos)
M0.2.pos[1,]
library(MRTrios)
?HumanMethProbeInfo
#load the package
library(MRTrios)
library(printr)
library(knitr)
library(tibble)
library(kableExtra)
# Set so that long lines in R will be wrapped:
opts_chunk$set(tidy.opts=list(width.cutoff=40),tidy=TRUE)
#documentation for the package
library(help = "MRTrios")
#the datasets used
dim(meth)
meth[1:5,1:5]
dim(cna)
cna[1:5,1:5]
dim(gene)
gene[1:5,1:5]
dim(clinical.pos)
head(clinical.pos)
dim(clinical.neg)
head(clinical.neg)
# code for the function
trios
#Methylation data has multiple genes in one row separated by ";", so we split them
meth.genes = strsplit(as.character(meth$Gene_Symbol), ';')
#get the rows with all NA values
na.meth = removeNA(meth, 5)
na.gene = removeNA(gene, 3)
na.cna = removeNA(cna, 3)
#Use the trios function
result = trios("C3orf35", meth, cna, gene, meth.genes, na.meth, na.gene, na.cna)
result
meth[11,1:5]
cna[5,1:5]
gene[8,1:5]
#Use the trios function
result = trios("C13orf15", meth, cna, gene, meth.genes, na.meth, na.gene, na.cna)
result
# code for the function
entrezCNA
#Use the trios function
result = trios("LRRC16A", meth, cna, gene, meth.genes, na.meth, na.gene, na.cna)
result
# code for the function
entrezGENE
# code for the function
#findTrioAll
#use the function to match trios using gene name and entrez ID
trios.df = findTrioAll(meth, cna, gene, 5, 3, 3)
head(trios.df)
# code for the function
addDupsCNA
#use the function match additional entries in the CNA column of trios data using the package "org.Hs.eg.db"
result = addDupsCNA(trios.df, cna)
#initial trios data with entries in the CNA column filled in after matching
head(result[[1]])
#additional trios data for genes that were matched and had multiple entrez id matches in the CNA data
result[[2]]
# code for the function
addDupsGENE
#use the function to match additional entries in the Gene Expression column of trios data using the package "org.Hs.eg.db"
#It also merges the intial and additional trios data (res[[1]] and res[[2]]) and returns one data matrix
final.trios.df = addDupsGENE(result[[1]], result[[2]], gene)
head(final.trios.df)
#Find common individuals between the methylation and gene expression dataset
com.ind = intersect(colnames(gene)[3:ncol(gene)], colnames(meth)[5:ncol(meth)])
com.ind[1:5]
# code for the function
findPCs
#Use the function to get PC score matrix and significantly associated PCs in both methylation and gene expression data for positive ER individuals.
pc.meth = findPCs(meth, 5, 2, clinical.pos[,1], com.ind, "Pos", 1)
pc.meth[[1]][1:5,1:5]
#Use the function to get the indices data matrix
gene.table.pos = findIndex(gene, 3, 1, clinical.pos[,1], com.ind, "Pos")
meth.table.pos = findIndex(meth, 3, 1, clinical.pos[,1], com.ind, "Pos")
#the datasets used
dim(meth)
meth[1:5,1:5]
dim(cna)
cna[1:5,1:5]
dim(gene)
gene[1:5,1:5]
dim(clinical.pos)
head(clinical.pos)
#Methylation data has multiple genes in one row separated by ";", so we split them
meth.genes = strsplit(as.character(meth$Gene_Symbol), ';')
#get the rows with all NA values
na.meth = removeNA(meth, 5)
na.gene = removeNA(gene, 3)
na.cna = removeNA(cna, 3)
#Use the trios function
result = trios("C3orf35", meth, cna, gene, meth.genes, na.meth, na.gene, na.cna)
result
meth[11,1:5]
cna[5,1:5]
gene[8,1:5]
#Use the trios function
result = trios("C13orf15", meth, cna, gene, meth.genes, na.meth, na.gene, na.cna)
result
#use the function to match trios using gene name and entrez ID
trios.df = findTrioAll(meth, cna, gene, 5, 3, 3)
#use the function match additional entries in the CNA column of trios data using the package "org.Hs.eg.db"
result = addDupsCNA(trios.df, cna)
#initial trios data with entries in the CNA column filled in after matching
head(result[[1]])
#additional trios data for genes that were matched and had multiple entrez id matches in the CNA data
result[[2]]
#use the function to match additional entries in the Gene Expression column of trios data using the package "org.Hs.eg.db"
#It also merges the intial and additional trios data (res[[1]] and res[[2]]) and returns one data matrix
final.trios.df = addDupsGENE(result[[1]], result[[2]], gene)
head(final.trios.df)
#Find common individuals between the methylation and gene expression dataset
com.ind = intersect(colnames(gene)[3:ncol(gene)], colnames(meth)[5:ncol(meth)])
com.ind[1:5]
pc.meth[[1]][1:5,1:5]
pc.meth.pos[1:5,1:5]
sig.pc.meth[1:5]
pc.meth.pos[1:5,1:5]
sig.pcs.meth[1:5]
#Use the function to get the indices data matrix
gene.table.pos = findIndex(gene, 3, 1, clinical.pos[,1], com.ind, "Pos")
meth.table.pos = findIndex(meth, 3, 1, clinical.pos[,1], com.ind, "Pos")
#Use the function to perform the MRGN inference with confounding variables
final.result = analyzeTrios(meth, gene, cna, final.trios.df, pc.meth.pos, pc.gene.pos, sig.pcs.meth, sig.pcs.gene, clinical.pos, meth.table.pos, gene.table.pos, 2, 3, 5, 3)
kable(head(final.result), format="latex", booktabs=TRUE) %>%
kable_styling(latex_options="scale_down")
#kable(head(final.result), format="latex", booktabs=TRUE) %>%
#  kable_styling(latex_options="scale_down")
head(final.result
#kable(head(final.result), format="latex", booktabs=TRUE) %>%
#  kable_styling(latex_options="scale_down")
head(final.result)
#Use the function for post filtering on the obtained results
df = postFilter(final.result)
debug(postFilter)
df = postFilter(final.result)
res[1,]
df = postFilter(final.result)
dim(res)
i
res$`pV1.T2`[i]
res[1,]
final.result[1,]
dim(final.result)
colnames(final.result)[c(6,7,12,13)]
colnames(final.result)[c(6,7,12,13)] = c("V1.T1", "V1.T2", "pV1.T1", "pV1.T2")
df = postFilter(final.result)
undebug(postFilter)
df = postFilter(final.result)
df
rows = which(df$Inferred.Model != df$Inferred.Model2)
rows
rows = which(df$Inferred.Model != df$Inferred.Model2)
kable(head(df[rows,]), format="latex", booktabs=TRUE) %>%
kable_styling(latex_options="scale_down")
df[rows,]
df[rows,]
# code for the function
HumanMethProbeInfo
probe_info_data = HumanMethProbeInfo(df, "M1.1", meth, gene, cna, final.trios.df, humanmeth, biomart, 5, 3, 3, clinical.pos)
probe_info_data
probe_info_data
library(MRTrios)
?analyzeTrios
library(devtools)
document()
library(MRTrios)
#Use the function to perform the MRGN inference with confounding variables
final.result = analyzeTrios(meth, gene, cna, final.trios.df, pc.meth.pos, pc.gene.pos, sig.pcs.meth, sig.pcs.gene, clinical.pos, meth.table.pos, gene.table.pos, 2, 3, 5, 3)
#use the function to match additional entries in the Gene Expression column of trios data using the package "org.Hs.eg.db"
#It also merges the intial and additional trios data (res[[1]] and res[[2]]) and returns one data matrix
final.trios.df = addDupsGENE(result[[1]], result[[2]], gene)
#use the function to match trios using gene name and entrez ID
trios.df = findTrioAll(meth, cna, gene, 5, 3, 3)
#use the function match additional entries in the CNA column of trios data using the package "org.Hs.eg.db"
result = addDupsCNA(trios.df, cna)
#use the function to match additional entries in the Gene Expression column of trios data using the package "org.Hs.eg.db"
#It also merges the intial and additional trios data (res[[1]] and res[[2]]) and returns one data matrix
final.trios.df = addDupsGENE(result[[1]], result[[2]], gene)
#Find common individuals between the methylation and gene expression dataset
com.ind = intersect(colnames(gene)[3:ncol(gene)], colnames(meth)[5:ncol(meth)])
com.ind[1:5]
#Use the function to get the indices data matrix
gene.table.pos = findIndex(gene, 3, 1, clinical.pos[,1], com.ind, "Pos")
meth.table.pos = findIndex(meth, 3, 1, clinical.pos[,1], com.ind, "Pos")
#Use the function to perform the MRGN inference with confounding variables
final.result = analyzeTrios(meth, gene, cna, final.trios.df, pc.meth.pos, pc.gene.pos, sig.pcs.meth, sig.pcs.gene, clinical.pos, meth.table.pos, gene.table.pos, 2, 3, 5, 3)
#kable(head(final.result), format="latex", booktabs=TRUE) %>%
#  kable_styling(latex_options="scale_down")
head(final.result)
#colnames(final.result)[c(6,7,12,13)] = c("V1.T1", "V1.T2", "pV1.T1", "pV1.T2")
#Use the function for post filtering on the obtained results
df = postFilter(final.result)
rows = which(df$Inferred.Model != df$Inferred.Model2)
#kable(head(df[rows,]), format="latex", booktabs=TRUE) %>%
#  kable_styling(latex_options="scale_down")
df[rows,]
probe_info_data = HumanMethProbeInfo(df, "M1.1", meth, gene, cna, final.trios.df, humanmeth, biomart, 5, 3, 3, clinical.pos)
probe_info_data
summary(parkinsons_updrs)
parkinsons_updrs <- read.csv("C:/Users/kark6289/Downloads/parkinsons_updrs.data")
dim(parkinsons_updrs)
head(parkinsons_updrs)
summary(parkinsons_updrs)
pkd_fit = lm(total_UPDRS ~., data = parkinsons_updrs[,-1])
summary(pkd_fit)
dim(parkinsons_updrs)
pairs[parkinsons_updrs[,c(2:7, 15, 16, 19:22)]]
parkinsons_updrs[,c(2:7, 15, 16, 19:22)]
parkinsons_updrs[1:5,c(2:7, 15, 16, 19:22)]
summary(pkd_fit)
parkinsons_updrs[1,]
pairs[parkinsons_updrs[1:5,c(2:8, 15, 16, 19:22)]]
pairs(parkinsons_updrs[1:5,c(2:8, 15, 16, 19:22)])
cor(tmp)
tmp = parkinsons_updrs[1:5,c(2:8, 15, 16, 19:22)]
pairs(tmp)
cor(tmp)
cor(tmp[,-1:2])
cor(tmp[,-c(1:2)])
setwd("C:/Users/kark6289/OneDrive - University of Idaho/documents/AUDREY FU LAB/Thesis")
setwd("/Users/kark6289/OneDrive - University of Idaho/DOCUMENTS/AUDREY FU LAB/Probe info/addGeneMeans")
M0.1.pos = read.csv("M0.1_pos.csv")
dim(M0.1.pos)
M0.1.pos[1,]
M0.2.pos = read.csv("M0.2_pos.csv")
dim(M0.2.pos)
M0.2.pos[1,]
M1.1.pos = read.csv("M1.1_pos.csv")
dim(M1.1.pos)
M1.1.pos[1,]
M1.2.pos = read.csv("M1.2_pos.csv")
dim(M1.2.pos)
M1.2.pos[1,]
data0 = M0.1.pos
data01 = M0.2.pos
dara1 = M1.1.pos
data1 = M1.1.pos
data2 = M1.2.pos
tmp0 = unique(data0$IlmnID)
tmp00 = unique(data01$IlmnID)
tmp1 = unique(data1$IlmnID)
tmp2 = unique(data2$IlmnID)
df01 = data0[match(tmp0,data0$IlmnID),]
df010 = data01[match(tmp00,data01$IlmnID),]
df1 = data1[match(tmp1,data1$IlmnID),]
df2 = data2[match(tmp2,data2$IlmnID),]
plot(df01$Methyl_mean, df01$GeneExp_mean, main = "M0.1 pos")
plot(df010$Methyl_mean, df010$GeneExp_mean, main = "M0.2 pos")
plot(df1$Methyl_mean, df1$GeneExp_mean, main = "M1.1 pos")
plot(df2$Methyl_mean, df2$GeneExp_mean, main = "M1.2 pos")
tmp.gene0 = unique(data0$Biomart_GeneName)
tmp.gene01 = unique(data01$Biomart_GeneName)
tmp.gene1 = unique(data1$Biomart_GeneName)
tmp.gene2 = unique(data2$Biomart_GeneName)
df02 = data0[match(tmp.gene0, data0$Biomart_GeneName),]
df020 = data01[match(tmp.gene01, data01$Biomart_GeneName),]
df3 = data1[match(tmp.gene1, data1$Biomart_GeneName),]
df4 = data2[match(tmp.gene2, data2$Biomart_GeneName),]
modeltype0 = "M0.1 pos"
modeltype01 = "M0.2 pos"
modeltype1 = "M1.1 pos"
modeltype2 = "M1.2 pos"
col = '#003366'
p06 <- ggplot(df02, aes(x=GeneExp_mean, y=after_stat(density))) +
geom_histogram(fill=col, bins = 30) #+ ylim(0,0.4) + coord_cartesian(xlim = c(-5,5)) #+ xlim(-5,5)
p06 <- p06 + ggtitle(modeltype0) +
xlab("Gene exp mean") + ylab("Density") +
theme(plot.title = element_text(hjust = 0.5))
library("gridExtra")
library("ggplot2")
p06 <- ggplot(df02, aes(x=GeneExp_mean, y=after_stat(density))) +
geom_histogram(fill=col, bins = 30) #+ ylim(0,0.4) + coord_cartesian(xlim = c(-5,5)) #+ xlim(-5,5)
p06 <- p06 + ggtitle(modeltype0) +
xlab("Gene exp mean") + ylab("Density") +
theme(plot.title = element_text(hjust = 0.5))
p06
p07 <- ggplot(df020, aes(x=GeneExp_mean, y=after_stat(density))) +
geom_histogram(fill=col, bins = 30) #+ ylim(0,0.4) + coord_cartesian(xlim = c(-5,5)) #+ xlim(-5,5)
p07 <- p07 + ggtitle(modeltype01) +
xlab("Gene exp mean") + ylab("Density") +
theme(plot.title = element_text(hjust = 0.5))
p07
p11 <- ggplot(df3, aes(x=GeneExp_mean, y=after_stat(density))) +
geom_histogram(fill=col, bins = 30)  #+ coord_cartesian(xlim = c(-4,0.5)) #+ xlim(-5,5)
p11 <- p11 + ggtitle(modeltype1) +
xlab("Gene exp mean") + ylab("Density") +
theme(plot.title = element_text(hjust = 0.5))
p11
p12 <- ggplot(df4, aes(x=GeneExp_mean, y=after_stat(density))) +
geom_histogram(fill=col, bins = 30) #+ ylim(0,0.4) + coord_cartesian(xlim = c(-55,0.5)) #+ xlim(-5,5)
p12 <- p12 + ggtitle(modeltype2) +
xlab("Gene exp mean") + ylab("Density") +
theme(plot.title = element_text(hjust = 0.5))
p12
summary(df02$GeneExp_mean)
summary(df020$GeneExp_mean)
summary(df3$GeneExp_mean)
summary(df4$GeneExp_mean)
p06 <- ggplot(df02, aes(x=GeneExp_mean, y=after_stat(density))) +
geom_histogram(fill=col, bins = 30) + ylim(0,3) + coord_cartesian(xlim = c(-55,0.5)) #+ xlim(-5,5)
p06 <- p06 + ggtitle(modeltype0) +
xlab("Gene exp mean") + ylab("Density") +
theme(plot.title = element_text(hjust = 0.5))
p06
p07 <- ggplot(df020, aes(x=GeneExp_mean, y=after_stat(density))) +
geom_histogram(fill=col, bins = 30) #+ ylim(0,3) + coord_cartesian(xlim = c(-55,0.5)) #+ xlim(-5,5)
p07 <- p07 + ggtitle(modeltype01) +
xlab("Gene exp mean") + ylab("Density") +
theme(plot.title = element_text(hjust = 0.5))
p07
p11 <- ggplot(df3, aes(x=GeneExp_mean, y=after_stat(density))) +
geom_histogram(fill=col, bins = 30)  #+ ylim(0,3) + coord_cartesian(xlim = c(-55,0.5)) #+ xlim(-5,5)
p11 <- p11 + ggtitle(modeltype1) +
xlab("Gene exp mean") + ylab("Density") +
theme(plot.title = element_text(hjust = 0.5))
p11
p07 <- ggplot(df020, aes(x=GeneExp_mean, y=after_stat(density))) +
geom_histogram(fill=col, bins = 30) + ylim(0,3) + coord_cartesian(xlim = c(-55,0.5)) #+ xlim(-5,5)
p07 <- p07 + ggtitle(modeltype01) +
xlab("Gene exp mean") + ylab("Density") +
theme(plot.title = element_text(hjust = 0.5))
p07
p11 <- ggplot(df3, aes(x=GeneExp_mean, y=after_stat(density))) +
geom_histogram(fill=col, bins = 30)  + ylim(0,3) + coord_cartesian(xlim = c(-55,0.5)) #+ xlim(-5,5)
p11 <- p11 + ggtitle(modeltype1) +
xlab("Gene exp mean") + ylab("Density") +
theme(plot.title = element_text(hjust = 0.5))
p11
p12 <- ggplot(df4, aes(x=GeneExp_mean, y=after_stat(density))) +
geom_histogram(fill=col, bins = 30) #+ ylim(0,3) + coord_cartesian(xlim = c(-55,0.5)) #+ xlim(-5,5)
p12 <- p12 + ggtitle(modeltype2) +
xlab("Gene exp mean") + ylab("Density") +
theme(plot.title = element_text(hjust = 0.5))
p12
p12 <- ggplot(df4, aes(x=GeneExp_mean, y=after_stat(density))) +
geom_histogram(fill=col, bins = 30) + ylim(0,3) + coord_cartesian(xlim = c(-55,0.5)) #+ xlim(-5,5)
p12 <- p12 + ggtitle(modeltype2) +
xlab("Gene exp mean") + ylab("Density") +
theme(plot.title = element_text(hjust = 0.5))
p12
grid.arrange(p06, p07, p11, p12, ncol = 2)
