main = 'Inferred graph')
?CompareMethodsVStructure
library(pcalg)    # pc
library(bnlearn)  # pc.stable, mmpc, mmhc and hc
Result1 <- CompareMethodsVStructure(N = 100,
signal = 1.0,
'model1',
includeGV = TRUE,
ita = 10)
Result1
?library
?BiocManager::install
install.packages("prodlim")
devtools::install_github("Jarred6068/MRGN")
?prcomp
library (MRPC)
library (help=MRPC)
?IdentifyAssociatedPCs
?library
library (MRGN)
?infer.trio
infer.trio
PermReg
dim (M1trio)
M1trio[1:5,]
?sample
CNA <- sample (c(-1, 0, 1, 2), size=nrow(M1trio))
CNA <- sample (c(-1, 0, 1, 2), size=1000)
CNA <- sample (c(-1, 0, 1, 2), size=1000, replace = TRUE)
table (CNA)
length (table(CNA))
unique (CNA)
T1 <- 0.7*CNA + rnorm (1000, sd=0.1)
T2 <- 1.2*T1 + rnorm (1000, sd=0.1)
C1 <- rnorm (1000, sd=0.2)
C2 <- rnorm (1000, sd=0.1)
data <- data.frame (CNA, T1, T2, C1, C2)
dim (data)
data[1:5,]
#' A function to infer the causal network of a trio
#'
#' This function takes in a matrix representing a trio (with or without confounding variables) and performs the
#' MRGN inference. It wraps the functions get.freq(), Reg(), PermReg(), and class.vec() to infer an input trio.
#' It returns a one dimensional dataframe containing the results of the coefficient and marginal tests and the
#' inferred model structure
#'
#' @param trio A dataframe with at least 3 columns. The first column should be the genetic variant, and the second
#'             and third columns the molecular phenotypes. Data in columns 4+ are treated as confounding variables
#' @param use.perm (logical) if TRUE the permutation test is used for trios with minor allele freq < gamma. If FALSE
#'                 test is ignored for all trios (default = TRUE)
#' @param gamma The minor allele frequency threshold for which the permutation test should be used such that permutation is
#'              performed when minor allele freq < gamma (when use.perm = TRUE).
#' @param alpha The rejection threshold for all wald tests (default = 0.01) which is approximately the bonferroni correction
#' @param nperms The number of permutations to perform for trios with rare variants (default = 10,000)
#' @param verbose (logical) if TRUE results of the regressions are printed
#' @examples
#' #inference on a single trio
#' result=infer.trio(M1trio)
#' print(result)
#'
#' \dontrun{
#' #fast example on 10 trios from the built in dataset WBtrios
#' #return just the summary stats
#' stats = sapply(WBtrios[1:10], function(x) infer.trio(x)$Stats)
#' print(stats)
#' #return just the inferred model topology
#' models = sapply(WBtrios[1:10], function(x) infer.trio(x)$Inferred.Model)
#' print(models)
#' }
#' @return a dataframe of dimension 1 x 14 with the following columns:
#'   \describe{
#'   \item{b11}{the indicator [0,1] value for the conditional test T1 ~ V | T2,U}
#'   \item{b21}{the indicator [0,1] value for the conditional test T1 ~ T2 | V,U}
#'   \item{b12}{the indicator [0,1] value for the conditional test T2 ~ V | T1,U}
#'   \item{b22}{the indicator [0,1] value for the conditional test T2 ~ T1 | V,U}
#'   \item{V1:T2}{the indicator [0,1] value for the marginal test between V1 and T2}
#'   \item{V1:T1}{the indicator [0,1] value for the marginal test between V1 and T1}
#'   \item{pb11}{the p-value for the conditional test T1 ~ V | T2,U}
#'   \item{pb21}{the p-value for the conditional test T1 ~ T2 | V,U}
#'   \item{pb12}{the p-value for the conditional test T2 ~ V | T1,U}
#'   \item{pb22}{the p-value for the conditional test T2 ~ T1 | V,U}
#'   \item{pV1:T2}{the p-value for the marginal test between V1 and T2}
#'   \item{pV1:T1}{the p-value for the marginal test between V1 and T1}
#'   \item{Minor.freq}{the calculated frequency of the minor allele of the genetic variant}
#'   \item{Inferred.Model}{a string indicating the inferred model type as returned by \eqn{class.vec()}}
#'   }
#'
#' @export infer.trio
####################################################################
#a wrapper function for get.freq(), Reg(), and PermReg() to infer the trio
#combines the functions from sections 1.1-1.2
infer.trio=function(trio=NULL, use.perm = TRUE, gamma=0.05, is.CNA=FALSE, alpha=0.01, nperms=10000, verbose=FALSE){
#ensure trio is a dataframe for later functions:
trio = as.data.frame(trio)
#preallocate indicator vectors
xp=NULL
rp=NULL
#preform the standard regressions and outputs t-stat and p-values
#input is a trio with the variant in the first column followed by genes and confounders [V,T1,T2,U]
#step 1
pt.out=Reg(data = trio, verbose=verbose)
#check the frequency of the minor allele using get.freq()
#step 2
minor=get.freq(V=trio[,1])
#step 2.1
if(use.perm == TRUE & (minor<gamma | is.CNA)) {
#preform permuted regression (section 1.2) for rare variants
pvals=PermReg(trio = trio,
t.obs21 = pt.out$tvals[2],
t.obs22 = pt.out$tvals[4],
p11 = pt.out$pvals[1],
p12 = pt.out$pvals[3],
m = nperms)
}else{
#else return the pvals from standard reg.
pvals=pt.out$pvals
}
#---steps 3-4
#convert xp to indicator vector
#section 1.1 step
xp=ifelse(pvals<alpha, 1, 0)
#preform marginal tests
cors=c(stats::cor.test(trio[,1], trio[,3],use="pairwise.complete.obs")$p.value,
stats::cor.test(trio[,1], trio[,2],use="pairwise.complete.obs")$p.value)
#convert to indicator vector
rp=ifelse(cors<alpha, 1, 0)
#combine all useful stats - add indicator
all.stats=c(append(xp, rp), append(pvals, cors), minor)
names(all.stats)=c("b11","b21", "b12","b22", "V1:T2", "V1:T1", "pb11",
"pb21", "pb12","pb22","pV1:T2","pV1:T1", "Minor.freq")
all.stats = as.data.frame(t(all.stats))
all.stats$Inferred.Model = MRGN::class.vec(all.stats)
return(all.stats)
}
#' this function wraps PermReg.helper.fn() to preform the permuted regression. Not intended for direct use
#'
#' @param trio A dataframe with at least 3 columns and the first column containing the genetic variant
#' @param t.obs21 the t-statistic from Reg() represnting the test on beta21
#' @param t.obs22 the t-statistic from Reg() representing the test on beta22
#' @param p11 the p-value from the test on beta21
#' @param p12 the p-value from the test on beta22
#' @param m the number of permutations to perform
#' PermReg()
####################################################################
#this function uses PermReg.helper.fn() to preform the permuted regression
#analysis for rare variants - section 1.2
PermReg=function(trio=NULL, t.obs21=NULL, t.obs22=NULL, p11=NULL, p12=NULL, m=NULL){
#preallocate a matrix of indicies ranging from 1:sample size
#we will shuffle these numbers later to get the permutations within genotype
#need 2: one for each regression: Section 1.2 steps 1-1.2 and eqn (3) and (4)
mediator_perm1=matrix(c(1:dim(trio)[1]), nrow=dim(trio)[1], ncol = m)
mediator_perm2=matrix(c(1:dim(trio)[1]), nrow=dim(trio)[1], ncol = m)
#preallocate all permutations
#shuffle within each genotype
ngeno <- length (table (trio[,1]))
geno <- unique (trio[,1])
for (j in 1:ngeno) {
ind <- which(trio[,1] == geno[j])
if (length(ind) > 1) {
mediator_perm1[ind, ] <- apply(mediator_perm1[ind, ], 2, sample)
mediator_perm2[ind, ] <- apply(mediator_perm2[ind, ], 2, sample)
}
}
#this section handles data that may not have confounding variables included
if(dim(trio)[2]>3){
confounders=trio[,-c(1:3)]
}else{
confounders=NULL
}
#preforms all permutations of eqn (3) in parallel
#outputs Theta21
Theta21=apply(mediator_perm1, 2, PermReg.help.fn,
V=trio[,1],
T1=trio[,2],
T2=trio[,3],
U=confounders,
coln=colnames(trio),
response="T1")
#preforms all permutations of eqn (4) in parallel
#outputs Theta22
Theta22=apply(mediator_perm2, 2, PermReg.help.fn,
V=trio[,1],
T1=trio[,2],
T2=trio[,3],
U=confounders,
coln=colnames(trio),
response="T2")
#Step 2.1 - calculating the nominal p-values using Theta21 and Theta22
nominal.p21=2 * (1 - stats::pnorm(abs((t.obs21 - mean(Theta21))/stats::sd(Theta21))))
nominal.p22=2 * (1 - stats::pnorm(abs((t.obs22 - mean(Theta22))/stats::sd(Theta22))))
#concat pvalues
pvals=c(p11, nominal.p21, p12, nominal.p22)
#return pvalue vector
return(pvals)
}
infer.trio(trio = data, use.perm = TRUE, is.CNA = TRUE, alpha = 0.01, nperms = 100, verbose = TRUE)
#' A function which preforms the standard regressions between the nodes in the trio. Not intended for direct use
#'
#' @param data A dataframe with at least 3 columns and the first column containing the genetic variant
#' @param verbose (logical) if TRUE the summary of the regressions is printed
#'
#' PermReg()
####################################################################
#A function which preforms the standard regressions from section 1.1 -step 1
Reg=function(data=NULL, verbose=FALSE){
#data should be a n x (3+g) matrix with the variant in the first column
#preallocate p and t vectors
pvals=NULL
tvals=NULL
for(i in 2:3){
#preform the regressions in step 1
model=stats::lm(data[,i]~., data = data[,-i])
if(verbose==TRUE){print(summary(model))}
coefs=as.data.frame(summary(model)$coefficients)
pvals=append(pvals, coefs$`Pr(>|t|)`[2:3])
tvals=append(tvals, coefs$`t value`[2:3])
}
#name them according to coefficient index
names(pvals)=c("p11","p21","p12","p22")
names(tvals)=c("tobs11","tobs21","tobs12","tobs22")
#output pvalues and t-stats for b11,b21,b12,b22
return(pt.list=list(pvals=pvals,tvals=tvals))
}
infer.trio(trio = data, use.perm = TRUE, is.CNA = TRUE, alpha = 0.01, nperms = 100, verbose = TRUE)
####################################################################
#-------------------Helper-function-for-permuted-reg---------------
PermReg.help.fn=function(perm.map=NULL, V=NULL, T1=NULL, T2=NULL, U=NULL, coln=NULL, response=NULL){
#written for parallelization
#permutes
if(response=="T2"){
if(is.null(U)){
new.data=cbind.data.frame(V, T1[perm.map], T2)
}else{
new.data=cbind.data.frame(V, T1[perm.map], T2, U)
}
}else{
if(is.null(U)){
new.data=cbind.data.frame(V, T1, T2[perm.map])
}else{
new.data=cbind.data.frame(V, T1, T2[perm.map], U)
}
}
if(isFALSE(is.null(coln))){colnames(new.data)=coln}
#run regression
if(response=="T2"){
#section 1.2 step 1.1 eqn (4)
coef.mat=as.data.frame(summary(stats::lm(new.data[,3]~., data=new.data[,-3]))$coefficients)
wald.stat=coef.mat$`t value`[3]
#print(coef.mat)
}else{
#section 1.2 step 1.1 eqn (3)
coef.mat=as.data.frame(summary(stats::lm(new.data[,2]~., data=new.data[,-2]))$coefficients)
wald.stat=coef.mat$`t value`[3]
#print(coef.mat)
}
#return the wald stat: section 1.2 step 1.2
#since it is run in parallel the output in PermReg() is a vector
return(wald.stat)
}
infer.trio(trio = data, use.perm = TRUE, is.CNA = TRUE, alpha = 0.01, nperms = 100, verbose = TRUE)
collatz <- function (a, x=1, PRINT=FALSE) {
result <- a
while (a > 1) {
a <- ifelse ((a %% 2) == 0, a/2, a*3+x)
if (PRINT) {
cat(paste (a, ',', sep=''))
}
result <- c (result, a)
}
if (PRINT) {
cat ("\n")
}
return (result)
}
result <- collatz (4*(3*2^5)-1)
result
result %% 2
result <- collatz (4*(3*2^(10))-1)
plot (1:length (result), log10(result), pch=16, col="blue", cex=0.6)
result2 <- collatz (4*(5*2^(10))-1)
plot (1:length (result2), log10(result2), pch=16, col="blue", cex=0.6)
result3 <- collatz (4*(4*2^(10))-1)
plot (1:length (result3), log10(result3), pch=16, col="blue", cex=0.6)
result4 <- collatz (4*(4*2^(10))+1)
plot (1:length (result4), log10(result4), pch=16, col="blue", cex=0.6)
result5 <- collatz (4*(4*2^(10))+2)
plot (1:length (result5), log10(result5), pch=16, col="blue", cex=0.6)
result6 <- collatz (4*(4*2^(10))+3)
plot (1:length (result6), log10(result6), pch=16, col="blue", cex=0.6)
result7 <- collatz (4*(4*2^(10))+4)
plot (1:length (result7), log10(result7), pch=16, col="blue", cex=0.6)
plot (1:length (result), log10(result), pch=16, col="blue", cex=0.6)
plot (1:length (result2), log10(result2), pch=16, col="blue", cex=0.6)
plot (1:length (result3), log10(result3), pch=16, col="blue", cex=0.6)
collatz <- function (a, x=1, LOG10=TRUE, PRINT=FALSE) {
result <- a
while (a > 1) {
a <- ifelse ((a %% 2) == 0, a/2, a*3+x)
if (PRINT) {
cat(paste (a, ',', sep=''))
}
result <- c (result, a)
}
if (PRINT) {
cat ("\n")
}
if (LOG10) {
return (log10(result))
} else {
return (result)
}
}
result8 <- collatz (4*(11*2^(10))-1)
length (result8)
result8[1:10]
plot (1:length (result8), result8, pch=16, col="blue", cex=0.6)
result9 <- collatz (4*(50*2^(10))-1)
plot (1:length (result9), result9, pch=16, col="blue", cex=0.6)
result10 <- collatz (4*(51*2^(10))-1)
plot (1:length (result10), result10, pch=16, col="blue", cex=0.6)
result11 <- collatz (4*(53*2^(10))-1)
plot (1:length (result11), result11, pch=16, col="blue", cex=0.6)
result12 <- collatz (4*(47*2^(10))-1)
plot (1:length (result12), result12, pch=16, col="blue", cex=0.6)
result13 <- collatz (4*(11*2^(20))-1)
plot (1:length (result13), result13, pch=16, col="blue", cex=0.6)
(10^(result8)+1) %% 4
?mod
result8[1]
10^(result8[1])
10^(result8[1])+1
(10^(result8[1])+1)/4
(10^(result8[1])+1) %% 2
4 %% 2
8 %% 2
45056 %% 2
45056 %% 3
45056 %% 4
(10^(result8[1])+1) %% 4
10^(result8[1])+1
tmp <- 10^(result8[1])+1
typeof (tmp)
as.integer(tmp)
result8.nolog <- collatz (4*(11*2^(10))-1, LOG10 = FALSE)
result8.nolog[1:5]
result8.nolog[1:5] %% 4
(result8.nolog+1) %% 4
result8.nolog[36]
616556/4
result8.nolog[44]
(result8.nolog[44]+1)/4
(result8.nolog+1) %% 8
(result8.nolog+1) %% 16
(result8.nolog+1) %% 32
(result8.nolog+1) %% 64
(result8.nolog+1) %% 128
(result8.nolog+1) %% 256
result8.nolog[84]
(result8.nolog[84]+1)/256
(result8.nolog+1) %% 512
dim (data)
data[1:5,]
table (data[,1])
infer.trio
infer.trio(data, is.CNA = TRUE, nperms = 100, verbose = TRUE)
-15.5543 - 0.5643*4 + 0.6859*23 + 1.8639
1/(1+exp(0.1719))
-15.5543 - 0.5643*5 + 0.6859*25
1.2283/1.8639
360/7
120/14
60/8.57
51.4/8.57
pf(7, df1=2, df2=14, lower.tail = FALSE)
pf(6, df1=7, df2=14, lower.tail = FALSE)
pf(24, 6, 168, lower.tail = FALSE)
360/7
120/14
60/8.57
51.43/8.57
pf(7, 2, 14, lower.tail = FALSE)
pf(6, 7, 14, lower.tail = FALSE)
12*14
8400/168
data <- c(0.03, 0.12, 0.04, 0.04, 0.04, 0.12)
mean (data)
sd (data)
pt(3.703, df = 5, lower.tail = FALSE)
pt(2.015, df = 5, lower.tail = FALSE)
-15.5543 - 0.5643*4 + 0.6859*23 + 1.8639*1
1/(1+exp(0.1719))
-15.5543 - 0.5643*5 + 0.6859*25
1.2283/1.8639
0.065/(0.043/sqrt(6))
qt(p=0.05, df=5, lower.tail = FALSE)
2.015*0.043/sqrt(6)
0.065+0.035
0.6859*5
0.5643*5
0.6859*25
(48+78+151)/(50+100+200)
(48+78+151)/(50+100+200)*50
(41+89+154)/(50+100+200)*50
(41+87+163)/(50+100+200)*50
(34+27+128)/(50+50+200)*100
(26+13+87)/(50+50+200)*100
1871*0.8
library(networkBMA)
?ScanBMA
ScanBMA
networkBMA::ScanBMA.g
ScanBMAcontrol
##############################################
# ridge regression
##############################################
# function to calculate the ridge estimator
ridge <- function (y, x, d=0, scale=TRUE) {
if (scale) {
xs <- scale(x,T,T)
ys <- scale(y,T,T)
}
p <- dim(x)[2]
results <- solve(t(xs) %*% xs + d * diag(p)) %*% t(xs) %*% ys
return (results)
}
# use data from library MASS
library (MASS)
longley
?longley
names(longley)[1] <- "y"
pairs (longley)
# ridge regression when lambda=0
ridge (longley$y, longley[,-1])
# same as OLS with data standardized (mean=0, sd=1)
summary (lm (y ~ ., data=data.frame(scale (longley))))
# paths of coefficients in ridge regression
d <- seq (0, 0.1, 0.001)
longley.ridge.seq <- matrix (0, ncol=length (d), nrow=6)
for (i in 1:length (d)) {
longley.ridge.seq[,i] <- ridge (longley$y, longley[,-1], d=d[i])
}
rownames (longley.ridge.seq) <- colnames (longley[,-1])
# plot of paths of coefficients
par (mfrow=c(1,2))
matplot (d, t(longley.ridge.seq), lwd=2)
# use function lm.ridge()
# different standardization of data
library (MASS)
?lm.ridge
lm.ridge(y ~ ., longley)
plot(lm.ridge(y ~ ., longley, lambda = seq(0,0.1,0.001)))
select(lm.ridge(y ~ ., longley, lambda = seq(0,0.1,0.0001)))
# plot GCV MSE vs ridge constant
plot(seq(0,0.1,0.001), lm.ridge(y ~ ., longley, lambda = seq(0,0.1,0.001))$GCV)
# plot coefficients vs ridge constant
tmp <- lm.ridge(y ~ ., longley,lambda = seq(0,0.1,0.001))$coef
matplot (seq(0,0.1,0.001), t(tmp), lwd=2)
runif(1)
5.49 + 2.99 + 11.83 + 6.48 + 9.91
1462.20 + 18 + 36.70 + 59
library (devtools)
install.packages ("devtools")
library (devtools)
install_github ("audreyqyfu/MRTrios")
library (prodlim)
install.packages(prodlim)
install.packages("prodlim")
library (prodlim)
library (mvtnorm)
install.packages("mvtnorm")
install.packages("tmvtnorm")
install.packages("ff")
install.packages("propagate")
install.packages("Rdpack")
BiocManager::install("qvalue")
?install.packages
library (MRGN)
library (help=MRGN)
install_github ("audreyqyfu/MRTrios")
library (MRTrios)
library (help=MRTrios)
?grep
?install_github
?install.packages
?par
89000/12
88842/12
825*12
825*12/88842
825*12/(88842/2)
10*9/2
3/45
25^2
48/25
25/48
library (Rtools)
library (devtools)
install_github("audreyqyfu/MRTrios")
library (MRGN)
library (help=MRGN)
library (MRTrios)
?findPCsGeneral
data(gene)
data(meth)
typeof (gene)
com.ind = intersect(colnames(gene)[3:ncol(gene)], colnames(meth)[5:ncol(meth)])
length (com.ind)
pc.gene = findPCs(as.data.frame(gene), 3, 1, com.ind, 1)
library (roxygen2)
document()
setwd("/Users/audreyq.fu/Documents/GitHub/MRTrios")
document()
